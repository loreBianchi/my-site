{"version":3,"sources":["webpack:///./src/components/contact.js","webpack:///./src/components/list-portfolio.js","webpack:///./src/components/list-blog.js","webpack:///./src/pages/index.js","webpack:///./src/components/items-blog.js","webpack:///./src/components/items-portfolio.js"],"names":["Contact","props","state","submitDisabled","textAreaInput","bind","handleSubmit","showContactForm","contact","api_url","event","target","style","height","scrollHeight","preventDefault","this","setState","name","encodeURI","dataName","value","email","dataEmail","message","dataMessage","fetch","method","body","then","res","json","result","resMessage","opacity","response","innerHTML","classList","add","remove","_this","setTimeout","error","componentDidMount","color","window","getComputedStyle","btn","getPropertyValue","querySelector","setAttribute","contactArea","querySelectorAll","forEach","e","i","p","render","id","className","title","ref","c","type","required","overflowY","onChange","onClick","display","description","mail","href","phone","address","whiteSpace","React","Component","query","data","site","siteMetadata","allMarkdownRemark","edges","length","Fragment","IndexPage","winHeight","createSVGElement","n","v","document","createElementNS","setAttributeNS","setWindowHeight","addEventListener","sWidth","svg","clientWidth","tText","tWidth","getBoundingClientRect","width","tInnerText","split","tSpan","dy","x","appendChild","margin","fontSize","parseInt","innerHeight","placeholder","lang","viewBox","preserveAspectRatio","capitalizeTitleOnHome","toUpperCase","patternUnits","y","xlinkHref","fill","textAnchor","introTag","BlogItem","textSecondary","fluid","node","frontmatter","image","childImageSharp","to","fields","slug","aria-label","date","items","push","key","PortfolioItem"],"mappings":"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","file":"component---src-pages-index-js-33a17edaa42313d53368.js","sourcesContent":["import React from \"react\";\r\nimport SectionTitle from \"./sectiontitle\";\r\nimport { StaticQuery, graphql } from \"gatsby\";\r\nimport { PaperPlane, Mapmarker, Mobile, Envelope, Loading } from \"./icons\";\r\nimport SocialLinks from \"./sociallinks\";\r\nimport \"../style/contact.less\";\r\n\r\nclass Contact extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            submitDisabled: false\r\n        };\r\n\r\n        this.textAreaInput = this.textAreaInput.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.showContactForm = true;\r\n\r\n        if (this.props.contact.api_url === \"\") {\r\n            this.showContactForm = false;\r\n        }\r\n    }\r\n\r\n    textAreaInput(event) {\r\n        event.target.style.height = \"auto\";\r\n        event.target.style.height = event.target.scrollHeight + \"px\";\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        if (!this.state.submitDisabled) {\r\n            this.setState({\r\n                submitDisabled: true\r\n            });\r\n\r\n            let name = encodeURI(this.dataName.value),\r\n                email = encodeURI(this.dataEmail.value),\r\n                message = encodeURI(this.dataMessage.value),\r\n                body = `name=${name}&email=${email}&message=${message}`;\r\n\r\n            fetch(\"http://localhost/local/test.json\", {\r\n                method: \"post\",\r\n                body: body\r\n            })\r\n                .then(function(res) {\r\n                    return res.json();\r\n                })\r\n                .then(\r\n                    result => {\r\n                        this.setState({\r\n                            submitDisabled: false\r\n                        });\r\n                        this.resMessage.style.opacity = 1;\r\n                        if (result.response === \"error\") {\r\n                            this.resMessage.innerHTML =\r\n                                \"There was an error in sending the message\";\r\n                            this.resMessage.classList.add(\"color-error\");\r\n                        } else {\r\n                            this.resMessage.innerHTML =\r\n                                \"Message sent succesfully\";\r\n                            this.resMessage.classList.remove(\"color-error\");\r\n                        }\r\n                        this.dataName.value = \"\";\r\n                        this.dataEmail.value = \"\";\r\n                        this.dataMessage.value = \"\";\r\n                        let _this = this;\r\n                        setTimeout(function() {\r\n                            _this.resMessage.style.opacity = 0;\r\n                        }, 5000);\r\n                    },\r\n                    error => {\r\n                        this.resMessage.innerHTML = \"Message sent succesfully\";\r\n                        this.resMessage.classList.remove(\"color-error\");\r\n                        this.setState({\r\n                            submitDisabled: false\r\n                        });\r\n                        let _this = this;\r\n                        setTimeout(function() {\r\n                            _this.resMessage.style.opacity = 0;\r\n                        }, 5000);\r\n                    }\r\n                );\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.showContactForm) {\r\n            let color = window\r\n                .getComputedStyle(this.btn, null)\r\n                .getPropertyValue(\"color\");\r\n            this.btn.querySelector(\"path\").setAttribute(\"fill\", color);\r\n        }\r\n\r\n        let li = this.contactArea.querySelectorAll(\".item\");\r\n\r\n        li.forEach(function(e, i) {\r\n            let p = e.querySelector(\"path\");\r\n            if (p)\r\n                p.setAttribute(\r\n                    \"fill\",\r\n                    window.getComputedStyle(e, null).getPropertyValue(\"color\")\r\n                );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section id=\"contact\" className=\"container\">\r\n                <div className=\"section-title\">\r\n                    <SectionTitle title=\"CONTACT\" />\r\n                </div>\r\n                <div\r\n                    className={\"row\" + (this.showContactForm ? \"\" : \" no-form\")}\r\n                    ref={c => (this.contactArea = c)}\r\n                >\r\n                    {this.showContactForm && (\r\n                        <div className=\"col s12 m6\">\r\n                            <form>\r\n                                <div className=\"field\">\r\n                                    <label>\r\n                                        <span className=\"label text-tertiary\">\r\n                                            Name\r\n                                        </span>\r\n                                        <div className=\"input-border\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                ref={c => (this.dataName = c)}\r\n                                                className=\"field-box\"\r\n                                                name=\"name\"\r\n                                                id=\"name\"\r\n                                                required\r\n                                            />\r\n                                        </div>\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"field\">\r\n                                    <label>\r\n                                        <span className=\"label text-tertiary\">\r\n                                            Email\r\n                                        </span>\r\n                                        <div className=\"input-border\">\r\n                                            <input\r\n                                                type=\"email\"\r\n                                                ref={c => (this.dataEmail = c)}\r\n                                                className=\"field-box\"\r\n                                                name=\"email\"\r\n                                                id=\"email\"\r\n                                                required\r\n                                            />\r\n                                        </div>\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"field\">\r\n                                    <label>\r\n                                        <span className=\"label text-tertiary\">\r\n                                            Message\r\n                                        </span>\r\n                                        <div className=\"input-border\">\r\n                                            <textarea\r\n                                                style={{ overflowY: \"hidden\" }}\r\n                                                ref={c =>\r\n                                                    (this.dataMessage = c)\r\n                                                }\r\n                                                className=\"field-box\"\r\n                                                onChange={this.textAreaInput}\r\n                                                name=\"message\"\r\n                                                id=\"message\"\r\n                                                required\r\n                                            />\r\n                                        </div>\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"field\">\r\n                                    <label className=\"ib\">\r\n                                        <button\r\n                                            className={\r\n                                                \"btn\" +\r\n                                                (this.state.submitDisabled\r\n                                                    ? \" disabled\"\r\n                                                    : \"\")\r\n                                            }\r\n                                            onClick={this.handleSubmit}\r\n                                            id=\"submit\"\r\n                                            ref={c => (this.btn = c)}\r\n                                        >\r\n                                            SEND{\" \"}\r\n                                            <span\r\n                                                className=\"icon paper-plane\"\r\n                                                style={{\r\n                                                    display: this.state\r\n                                                        .submitDisabled\r\n                                                        ? \"none\"\r\n                                                        : \"inline-block\"\r\n                                                }}\r\n                                            >\r\n                                                <PaperPlane />\r\n                                            </span>\r\n                                            <span\r\n                                                className=\"icon loading\"\r\n                                                style={{\r\n                                                    display: !this.state\r\n                                                        .submitDisabled\r\n                                                        ? \"none\"\r\n                                                        : \"inline-block\"\r\n                                                }}\r\n                                            >\r\n                                                <Loading />\r\n                                            </span>\r\n                                        </button>\r\n                                    </label>\r\n                                    <label>\r\n                                        <p\r\n                                            className=\"res-message\"\r\n                                            ref={c => (this.resMessage = c)}\r\n                                        ></p>\r\n                                    </label>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    )}\r\n                    <div\r\n                        className={\r\n                            this.showContactForm\r\n                                ? \"col s12 m6 details\"\r\n                                : \"col s12 details\"\r\n                        }\r\n                    >\r\n                        {this.props.contact.description && (\r\n                            <p className=\"text-tertiary\">\r\n                                {this.props.contact.description}\r\n                            </p>\r\n                        )}\r\n                        <ul>\r\n                            {this.props.contact.mail && (\r\n                                <li className=\"text-secondary item\">\r\n                                    <span className=\"icon\">\r\n                                        <Envelope />\r\n                                    </span>\r\n                                    <a\r\n                                        href={\r\n                                            \"mailto:\" + this.props.contact.mail\r\n                                        }\r\n                                    >\r\n                                        {this.props.contact.mail}\r\n                                    </a>\r\n                                </li>\r\n                            )}\r\n                            {this.props.contact.phone && (\r\n                                <li className=\"text-secondary item\">\r\n                                    <span className=\"icon\">\r\n                                        <Mobile />\r\n                                    </span>\r\n                                    <a href={\"tel:\" + this.props.contact.phone}>\r\n                                        {this.props.contact.phone}\r\n                                    </a>\r\n                                </li>\r\n                            )}\r\n                            {this.props.contact.address && (\r\n                                <li\r\n                                    className=\"text-tertiary item\"\r\n                                    style={{ whiteSpace: \"pre\" }}\r\n                                >\r\n                                    <span className=\"icon\">\r\n                                        <Mapmarker />\r\n                                    </span>\r\n                                    {this.props.contact.address}\r\n                                </li>\r\n                            )}\r\n                            <li>\r\n                                <SocialLinks />\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default () => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query {\r\n                site {\r\n                    siteMetadata {\r\n                        contact {\r\n                            api_url\r\n                            description\r\n                            mail\r\n                            phone\r\n                            address\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <Contact contact={data.site.siteMetadata.contact} />}\r\n    />\r\n);\r\n","import React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport PortfolioItems from \"./items-portfolio\";\r\n\r\nexport default function() {\r\n    const query = useStaticQuery(graphql`\r\n        query portfolioList {\r\n            allMarkdownRemark(\r\n                filter: { fileAbsolutePath: { regex: \"/portfolio/\" } }\r\n                limit: 6\r\n                sort: { fields: [frontmatter___date], order: DESC }\r\n            ) {\r\n                edges {\r\n                    node {\r\n                        id\r\n                        frontmatter {\r\n                            title\r\n                            description\r\n                            image {\r\n                                publicURL\r\n                                childImageSharp {\r\n                                    fluid(maxWidth: 1920) {\r\n                                        srcSet\r\n                                        ...GatsbyImageSharpFluid\r\n                                    }\r\n                                    id\r\n                                }\r\n                            }\r\n                        }\r\n                        fields {\r\n                            slug\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `);\r\n\r\n    return (\r\n        <section id=\"portfolio\" className=\"container\">\r\n            <PortfolioItems data={query} />\r\n        </section>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport BlogItems from \"./items-blog\";\r\nimport SectionTitle from \"./sectiontitle\";\r\n\r\nexport default function() {\r\n    const query = useStaticQuery(graphql`\r\n        query blogList {\r\n            allMarkdownRemark(\r\n                filter: { fileAbsolutePath: { regex: \"/blog/\" } }\r\n                limit: 6\r\n                sort: { fields: [frontmatter___date], order: DESC }\r\n            ) {\r\n                edges {\r\n                    node {\r\n                        id\r\n                        frontmatter {\r\n                            title\r\n                            description\r\n                            date\r\n                            image {\r\n                                publicURL\r\n                                childImageSharp {\r\n                                    fluid(maxWidth: 1920) {\r\n                                        srcSet\r\n                                        ...GatsbyImageSharpFluid\r\n                                    }\r\n                                    id\r\n                                }\r\n                            }\r\n                        }\r\n                        fields {\r\n                            slug\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `);\r\n\r\n    if (query.allMarkdownRemark.edges.length > 0) {\r\n        return (\r\n            <section id=\"blog\" className=\"container\">\r\n                <div className=\"section-title\">\r\n                    <SectionTitle title=\"BLOG\" />\r\n                </div>\r\n                <BlogItems data={query} />\r\n            </section>\r\n        );\r\n    } else {\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Layout from \"../components/layout\";\r\nimport { graphql } from \"gatsby\";\r\nimport SEO from \"../components/seo\";\r\nimport SocialLinks from \"../components/sociallinks\";\r\nimport PortfolioList from \"../components/list-portfolio\";\r\nimport BlogList from \"../components/list-blog\";\r\nimport Contact from \"../components/contact\";\r\nimport \"../style/wall.less\";\r\n\r\nclass IndexPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            winHeight: \"100vh\"\r\n        };\r\n    }\r\n\r\n    createSVGElement(n, v) {\r\n        n = document.createElementNS(\"http://www.w3.org/2000/svg\", n);\r\n        for (var p in v) n.setAttributeNS(null, p, v[p]);\r\n        return n;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setWindowHeight();\r\n        let _this = this;\r\n        window.addEventListener(\"resize\", function() {\r\n            _this.setWindowHeight();\r\n        });\r\n        let sWidth = this.svg.clientWidth,\r\n            tText = this.svg.querySelector(\"text\"),\r\n            tWidth = tText.getBoundingClientRect().width;\r\n\r\n        if (tWidth > sWidth) {\r\n            let tInnerText = tText.innerHTML;\r\n            if (tInnerText.split(\" \").length > 1) {\r\n                tText.innerHTML = \"\";\r\n                tInnerText.split(\" \").forEach(function(e, i) {\r\n                    let tSpan = _this.createSVGElement(\"tspan\", {\r\n                        dy: i === 0 ? \"0em\" : \".8em\",\r\n                        x: \"50\"\r\n                    });\r\n                    tSpan.innerHTML = e;\r\n                    tText.appendChild(tSpan);\r\n                });\r\n                setTimeout(function() {\r\n                    _this.svg.style.height =\r\n                        tText.getBoundingClientRect().height + 70;\r\n                    _this.svg.style.margin = \"15px auto\";\r\n                }, 250);\r\n            } else {\r\n                while (tWidth > sWidth) {\r\n                    let fontSize = parseInt(\r\n                        window\r\n                            .getComputedStyle(tText, null)\r\n                            .getPropertyValue(\"font-size\")\r\n                    );\r\n                    tText.style.fontSize = fontSize - 1 + \"px\";\r\n                    tWidth = tText.getBoundingClientRect().width;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setWindowHeight() {\r\n        this.setState({\r\n            winHeight: window.innerHeight\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <Layout placeholder={false}>\r\n                <SEO\r\n                    lang=\"en\"\r\n                    title={this.props.data.site.siteMetadata.title}\r\n                />\r\n                <div\r\n                    className=\"wall\"\r\n                    style={{ height: this.state.winHeight + \"px\" }}\r\n                >\r\n                    <div className=\"intro container\">\r\n                        <div className=\"main-title text-primary\">\r\n                            <svg\r\n                                width=\"90%\"\r\n                                height=\"220px\"\r\n                                viewBox=\"0 0 100 100\"\r\n                                preserveAspectRatio=\"xMidYMid slice\"\r\n                                ref={c => (this.svg = c)}\r\n                            >\r\n                                {this.props.data.site.siteMetadata\r\n                                    .capitalizeTitleOnHome\r\n                                    ? this.props.data.site.siteMetadata.title.toUpperCase()\r\n                                    : this.props.data.site.siteMetadata.title}\r\n                                <pattern\r\n                                    id=\"wallPattern\"\r\n                                    patternUnits=\"userSpaceOnUse\"\r\n                                    width=\"100\"\r\n                                    height=\"100\"\r\n                                >\r\n                                    <rect\r\n                                        x=\"0\"\r\n                                        y=\"0\"\r\n                                        className=\"fill-primary\"\r\n                                        width=\"100\"\r\n                                        height=\"100\"\r\n                                    />\r\n                                    <image\r\n                                        xlinkHref=\"/images/wall.jpg\"\r\n                                        height=\"100\"\r\n                                        width=\"100\"\r\n                                        y=\"0\"\r\n                                        preserveAspectRatio=\"none\"\r\n                                    ></image>\r\n                                </pattern>\r\n                                <text\r\n                                    fill=\"url(#wallPattern)\"\r\n                                    textAnchor=\"middle\"\r\n                                    x=\"50\"\r\n                                    y=\"50\"\r\n                                >\r\n                                    {this.props.data.site.siteMetadata\r\n                                        .capitalizeTitleOnHome\r\n                                        ? this.props.data.site.siteMetadata.title.toUpperCase()\r\n                                        : this.props.data.site.siteMetadata.title}\r\n                                </text>\r\n                            </svg>\r\n                        </div>\r\n                        <p className=\"tag-line text-secondary\">\r\n                            {this.props.data.site.siteMetadata.introTag}\r\n                        </p>\r\n                        <p className=\"caption text-tertiary\">\r\n                            {this.props.data.site.siteMetadata.description}\r\n                        </p>\r\n                        <a href=\"#portfolio\" className=\"btn\">\r\n                            SEE WORKS\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"social-buttons\">\r\n                        <SocialLinks />\r\n                    </div>\r\n                </div>\r\n                <PortfolioList />\r\n                <BlogList />\r\n                <Contact />\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IndexPage;\r\n\r\nexport const query = graphql`\r\n    query {\r\n        site {\r\n            siteMetadata {\r\n                title\r\n                capitalizeTitleOnHome\r\n                titleImage\r\n                introTag\r\n                description\r\n                social {\r\n                    name\r\n                    url\r\n                    icon\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport Date from \"./date\";\r\nimport { Calendar } from \"./icons\";\r\nimport \"../style/list-blog.less\";\r\n\r\nclass BlogItem extends React.Component {\r\n    componentDidMount() {\r\n        this.color = window\r\n            .getComputedStyle(this.textSecondary, null)\r\n            .getPropertyValue(\"color\");\r\n        const calendar = this.textSecondary.querySelector(\"path\");\r\n        calendar.setAttribute(\"fill\", this.color);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item col s12 m6\">\r\n                <div className=\"box\">\r\n                    <div className=\"image\">\r\n                        <Img\r\n                            fluid={\r\n                                this.props.data.node.frontmatter.image\r\n                                    .childImageSharp.fluid\r\n                            }\r\n                        />\r\n                        <Link\r\n                            to={this.props.data.node.fields.slug}\r\n                            title={this.props.data.node.frontmatter.title}\r\n                            aria-label={this.props.data.node.frontmatter.title}\r\n                            className=\"overlay-link\"\r\n                            style={{ opacity: 0 }}\r\n                        >\r\n                            {this.props.data.node.frontmatter.title}\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h3 className=\"text-primary\">\r\n                            <Link\r\n                                to={this.props.data.node.fields.slug}\r\n                                title={this.props.data.node.frontmatter.title}\r\n                            >\r\n                                {this.props.data.node.frontmatter.title}\r\n                            </Link>\r\n                        </h3>\r\n                        <p className=\"text-tertiary\">\r\n                            {this.props.data.node.frontmatter.description}\r\n                        </p>\r\n                        <p\r\n                            className=\"date text-secondary\"\r\n                            ref={c => (this.textSecondary = c)}\r\n                        >\r\n                            <span className=\"icon\">\r\n                                <Calendar />\r\n                            </span>\r\n                            <Date\r\n                                data={this.props.data.node.frontmatter.date}\r\n                            />\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function(props) {\r\n    const data = props.data.allMarkdownRemark.edges;\r\n    let items = [];\r\n    data.forEach(function(e, i) {\r\n        if (props.remove && e.node.id === props.remove) return;\r\n        items.push(<BlogItem key={e.node.id} data={e} />);\r\n    });\r\n    return <div className=\"row\">{items}</div>;\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport \"../style/list-portfolio.less\";\r\n\r\nclass PortfolioItem extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"item col s12\">\r\n                <div className=\"row flex\">\r\n                    <div className=\"col m6 image\">\r\n                        <Img\r\n                            fluid={\r\n                                this.props.data.node.frontmatter.image\r\n                                    .childImageSharp.fluid\r\n                            }\r\n                        />\r\n                        <Link\r\n                            to={this.props.data.node.fields.slug}\r\n                            title={this.props.data.node.frontmatter.title}\r\n                            aria-label={this.props.data.node.frontmatter.title}\r\n                            className=\"overlay-link\"\r\n                            style={{ opacity: 0 }}\r\n                        >\r\n                            {this.props.data.node.frontmatter.title}\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col m6 content\">\r\n                        <h2 className=\"text-primary pseudo-divider\">\r\n                            <Link\r\n                                to={this.props.data.node.fields.slug}\r\n                                title={this.props.data.node.frontmatter.title}\r\n                                aria-label={\r\n                                    this.props.data.node.frontmatter.title\r\n                                }\r\n                            >\r\n                                {this.props.data.node.frontmatter.title}\r\n                            </Link>\r\n                        </h2>\r\n                        <p className=\"text-tertiary\">\r\n                            {this.props.data.node.frontmatter.description}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function(props) {\r\n    const data = props.data.allMarkdownRemark.edges;\r\n    let items = [];\r\n    data.forEach(function(e, i) {\r\n        items.push(<PortfolioItem key={e.node.id} data={e} />);\r\n    });\r\n    return <div className=\"row\">{items}</div>;\r\n}\r\n"],"sourceRoot":""}